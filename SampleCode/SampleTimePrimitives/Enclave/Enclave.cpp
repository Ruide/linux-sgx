/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */


#include <stdarg.h>
#include <stdio.h>      /* vsnprintf */

#include "Enclave.h"
#include "Enclave_t.h"  /* print_string */

#include "sgx_trts.h"
#include "sgx_tseal.h"
#include "sgx_tae_service.h"
#include "sgx_tcrypto.h"
#include "string.h"

void goto_error(int ret);

void ecall_sgx_rsa3072_sign(void)
{
    sgx_rsa3072_key_t rsa_key;
    uint8_t mod[] = {
        0x9F 0x4F 0x55 0xE4 0xC5 0x64 0xB4 0x5C 0xDD 0x7E 0x78 0x86 0x82 0x58 0x63 0x3A 0xE0 0xFF 0x1B 0xF7 0x35 0x9F 0xE1 0xEA 0x0E 0xB4 0xC0 0x06 0x8A 0xC3 0xED 0xB9
        0x5A 0x2D 0x02 0x35 0x5C 0xA6 0xB4 0xDA 0xC1 0x9E 0xBA 0xB5 0x3F 0x27 0x36 0x55 0xF1 0x19 0x47 0x48 0xD6 0x04 0x3F 0x58 0x76 0x3F 0xDE 0x12 0x7B 0x5E 0x90 0x8F
        0x90 0xBC 0xFF 0xF5 0xC9 0xCC 0x0E 0x2A 0x33 0x07 0xD1 0xDC 0xA0 0x14 0x40 0x92 0x5F 0xC1 0x88 0xB5 0x34 0x8D 0x1F 0xC4 0x46 0x52 0x74 0x30 0xFE 0xEC 0x44 0x18
        0x38 0x31 0x56 0x8E 0xBA 0x97 0x38 0x45 0x79 0x52 0xC8 0xF6 0xEF 0xEB 0x06 0x1D 0x19 0x77 0x2A 0x7E 0xBC 0x4B 0xFC 0x41 0x79 0xAC 0x30 0x8F 0x7D 0x00 0xDB 0x45
        0xC3 0xC7 0x34 0xE6 0xB2 0x26 0xDD 0xE8 0x34 0x40 0xE7 0x74 0x1A 0xC2 0x5E 0xBD 0xBA 0x5F 0xEA 0x2B 0x51 0x8B 0xDD 0xE4 0x39 0x09 0xBC 0x5D 0xCA 0x82 0x9A 0x85
        0xEE 0x19 0xEA 0x1E 0x3E 0xC0 0x41 0x31 0x04 0xCD 0x38 0xAC 0xE5 0x84 0xC0 0x08 0x8E 0x3D 0xEC 0xC3 0x80 0x59 0x52 0x09 0xBA 0x84 0x94 0xCA 0x54 0x2E 0x50 0x8A
        0x3F 0x15 0x2D 0xE2 0x5E 0xC1 0xAF 0x0B 0xBB 0x2B 0xA4 0xAC 0x14 0xE7 0x1D 0x15 0x97 0x38 0xAC 0x9A 0xD8 0x6B 0x05 0xEE 0x53 0x4A 0x79 0x35 0x6B 0x0C 0xC0 0xC8
        0xEE 0xF6 0x07 0xFD 0x52 0xD6 0xB5 0x1C 0xB0 0xB1 0x8F 0x7A 0x4F 0x77 0x83 0x4A 0xA4 0xBF 0x04 0x2F 0x1A 0x58 0x65 0x2D 0xEE 0x7D 0x26 0x71 0xBE 0xEC 0xA7 0xC5
        0x31 0x3C 0x4F 0x7F 0x5E 0xDA 0xC8 0x41 0x06 0x34 0x40 0xE0 0xBD 0x92 0x12 0x87 0xB5 0x86 0x8D 0x50 0x8A 0xCF 0x7C 0x5F 0x70 0x19 0x23 0xF6 0x04 0xAB 0xF1 0x98
        0x99 0x48 0x92 0x77 0x94 0x1E 0x6B 0x34 0xC1 0x80 0x74 0x27 0x49 0x4D 0xDB 0x13 0x44 0x4A 0xBE 0x08 0xC2 0x48 0xFC 0x6D 0x7A 0x0F 0x79 0xDD 0x7D 0xB2 0x54 0x3A
        0x92 0xB7 0x4A 0xF2 0xD2 0x78 0x96 0x45 0x1B 0xD3 0x70 0x5E 0x79 0x7E 0x0E 0x83 0x18 0xEA 0x6F 0x9C 0x26 0x06 0x78 0x39 0xBF 0xBE 0x51 0x0D 0x36 0x9C 0x1E 0x08
        0x74 0x64 0x60 0xD6 0xCB 0x5B 0xA2 0x50 0xC2 0x4C 0x10 0x6F 0x5F 0xE7 0xBD 0xDE 0x00 0xBB 0x1A 0x45 0x0D 0x43 0xC3 0xCD 0xB4 0x52 0x5D 0x9C 0xCB 0x4D 0x19 0xCD
    };
    memcpy(&(rsa_key.mod), &mod, sizeof(rsa_key.mod);
    uint8_t d[] = {
        0x6B 0x16 0x75 0x63 0x83 0x55 0x2A 0xF0 0xC2 0xC6 0x05 0xEE 0x79 0x88 0x86 0xE7 0x1C 0xBB 0xD0 0x14 0x35 0x14 0xBD 0x91 0x43 0x07 0x5E 0x21 0x95 0xC8 0x3A 0x04
        0xF1 0xCA 0xBE 0x6C 0x55 0x4C 0xE5 0xF5 0x01 0xB3 0xBD 0xC4 0x9C 0xD2 0x26 0x75 0x05 0x33 0x4A 0xC9 0xF5 0x49 0x09 0x81 0x6F 0xAE 0x96 0x28 0x34 0x82 0x07 0x6C
        0x31 0xA1 0xAB 0x20 0xE2 0xA3 0xEB 0x0A 0xD6 0xA2 0x3E 0xB4 0xAF 0xD1 0x50 0x8C 0xA2 0x97 0x06 0x09 0x68 0x44 0xDF 0xFE 0x55 0xFD 0x3C 0xCE 0xF2 0x35 0x3E 0x83
        0xBA 0x00 0x5A 0x55 0x82 0x08 0x21 0x28 0xBB 0x76 0xD4 0xEF 0x7C 0xC2 0x7F 0x9A 0x12 0xC7 0xEA 0x0E 0x99 0xF3 0xAF 0x90 0x02 0x36 0xA5 0xB5 0x0C 0xCC 0xF8 0x18
        0xC4 0x13 0x95 0x70 0x87 0x94 0x83 0x9F 0xBE 0xA0 0x1C 0xB1 0x09 0xE7 0xC4 0xED 0x28 0x11 0x95 0x3F 0x98 0x24 0xEA 0xFD 0x16 0x0C 0x32 0xDF 0xC1 0x7A 0x40 0x2B
        0x51 0x10 0xCA 0x77 0xE7 0x9B 0x39 0x2A 0xA3 0x9E 0x66 0x6A 0x44 0x36 0xAB 0xD9 0x53 0xE8 0x27 0x70 0xC0 0xFB 0xA0 0x42 0xE5 0xCE 0xE8 0x6F 0x10 0xAD 0xCF 0x7E
        0x7E 0x63 0x73 0x41 0x3F 0xD6 0x1F 0x5D 0x27 0x1D 0x18 0x73 0xB8 0x44 0x69 0x63 0x0F 0x7B 0x1D 0x67 0x90 0xF2 0x58 0x49 0x8D 0x31 0xA6 0x23 0xF2 0xB2 0x2A 0xDB
        0x49 0x4F 0x05 0xFE 0xE1 0x8E 0xCE 0xBD 0xCA 0xCB 0x5F 0xFC 0x34 0xFA 0xAC 0x31 0x18 0xD5 0xAD 0x74 0x11 0x90 0x43 0x1E 0xF4 0x53 0xC4 0xA0 0x29 0xF3 0x6F 0x2E
        0x21 0x28 0x8A 0xFF 0x3E 0x3C 0xDB 0x2B 0x04 0x78 0xD5 0xEA 0xD3 0x61 0x0C 0x5A 0xCE 0x59 0x5E 0xE0 0x06 0x35 0x53 0xEA 0x4A 0x66 0x17 0xA4 0x58 0xC7 0x4B 0xBB
        0xBB 0x85 0x61 0xFA 0x62 0x14 0xF2 0x22 0xD6 0x55 0xF8 0xC4 0x30 0xDE 0x3C 0x0D 0xD8 0x86 0x29 0x5B 0x81 0x30 0xA8 0x9E 0x51 0x0A 0xA6 0x93 0xFE 0x76 0x38 0x7C
        0x61 0x7A 0xDC 0xF6 0xE1 0xA5 0xB9 0x83 0x67 0x37 0x4B 0x94 0xFB 0xFE 0x5E 0x57 0x10 0x9C 0x4A 0x68 0xC4 0xAE 0xFA 0xD0 0xD4 0x29 0xE1 0x08 0x24 0x68 0x14 0xB0
        0xA2 0xED 0xEA 0x8E 0x32 0x3D 0x6C 0xE0 0xD6 0xDD 0x0A 0x4A 0xEA 0x44 0x29 0x3F 0xAB 0x7C 0xBC 0xD8 0x08 0x82 0xD7 0x33 0x23 0x37 0x3E 0x68 0x32 0x89 0xBB 0x88
    };
    memcpy(&(rsa_key.d), &d, sizeof(rsa_key.d));
    uint8_t e[] = {0x03 0x00 0x00 0x00};
    memcpy(&(rsa_key.e), &e, sizeof(rsa_key.e));

    sgx_rsa3072_signature_t sig;
    uint8_t private_data = 0xf;
    sgx_status_t ret = sgx_rsa3072_sign( &private_data, 1, &rsa_key, &sig);

    if (ret != SGX_SUCCESS)
    {
        goto_error(ret);
    } else {
        printf("sgx_rsa3072_sign successed, the sig is: ");
        for (int i = 0; i < 384; i++)
        {
            printf("%02X", sig[i]);
        }
        printf("\n");
    }
}

void ecall_trusted_time_primitives(void)
{
    uint32_t ret = 0;
    int busy_retry_times = 2;
    sgx_time_source_nonce_t nonce = {0};
    sgx_time_t current_timestamp;

    do{
        ret = sgx_create_pse_session();
    }while (ret == SGX_ERROR_BUSY && busy_retry_times--);
    if(ret != SGX_SUCCESS)
    {
        goto_error(ret);
    } else {
        printf("pse session successfully created\n");
    }

    ret = sgx_get_trusted_time(&current_timestamp, &nonce);
    if(ret != SGX_SUCCESS)
    {
        goto_error(ret);
    } else {
        printf("trusted time successfully received and timestamp value is %d\n", current_timestamp);
    }

    ret = sgx_close_pse_session();
    if(ret != SGX_SUCCESS)
    {
        goto_error(ret);
    } else {
        printf("pse session successfully closed\n");
    }
}

void ecall_monotonic_counter_primitives(void)
{
    uint32_t ret = 0;
    uint32_t mc_value = 0;
    sgx_mc_uuid_t mc;
    memset(&mc, 0, sizeof(mc));
    int busy_retry_times = 2;

    do{
        ret = sgx_create_pse_session();
    }while (ret == SGX_ERROR_BUSY && busy_retry_times--);
    if(ret != SGX_SUCCESS)
    {
        goto_error(ret);
    } else {
        printf("pse session successfully created\n");
    }

    ret = sgx_create_monotonic_counter(&mc,&mc_value);
    if(ret != SGX_SUCCESS)
    {
        goto_error(ret);
    } else {
        printf("monotonic_counter successfully created and counter value is %d\n",mc_value);
        printf("monotonic_counter id created is %d %d %d, nonce is a length 13 array of uint8_t\n",mc.counter_id[0],mc.counter_id[1],mc.counter_id[2]);
    }

    ret = sgx_increment_monotonic_counter(&mc,&mc_value);
    if(ret != SGX_SUCCESS)
    {
        goto_error(ret);
    } else {
        printf("monotonic_counter successfully incremented and counter value is %d\n",mc_value);
    }

    ret = sgx_read_monotonic_counter(&mc,&mc_value);
    if(ret != SGX_SUCCESS)
    {
        goto_error(ret);
    } else {
        printf("monotonic_counter successfully read and counter value is %d\n",mc_value);
    }

    ret = sgx_destroy_monotonic_counter(&mc);
    if(ret != SGX_SUCCESS)
    {
        goto_error(ret);
    } else {
        printf("monotonic_counter successfully destroyed\n");
    }
    
    ret = sgx_close_pse_session();
    if(ret != SGX_SUCCESS)
    {
        goto_error(ret);
    } else {
        printf("pse session successfully closed\n");
    }
}

void goto_error(int ret)
{
    switch(ret)
    {
    case SGX_ERROR_SERVICE_UNAVAILABLE:
        /* Architecture Enclave Service Manager is not installed or not
        working properly.*/
            break;
    case SGX_ERROR_SERVICE_TIMEOUT:
        /* retry the operation later*/
            break;
    case SGX_ERROR_BUSY:
        /* retry the operation later*/
            break;
    case SGX_ERROR_MC_NOT_FOUND:
        /* the the Monotonic Counter ID is invalid.*/
            break;
    default:
        /*other errors*/
        break;
    }
}

/* 
 * printf: 
 *   Invokes OCALL to display the enclave buffer to the terminal.
 */
void printf(const char *fmt, ...)
{
    char buf[BUFSIZ] = {'\0'};
    va_list ap;
    va_start(ap, fmt);
    vsnprintf(buf, BUFSIZ, fmt, ap);
    va_end(ap);
    ocall_print_string(buf);
}
